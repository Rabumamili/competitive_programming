from collections import Counter

class UF:

    def __init__(self, n):
        self.p = list(range(n))
        self.r = [0] * n
    
    def find(self, k):
        if self.p[k] != k:
            self.p[k] = self.find(self.p[k])
        return self.p[k]
    
    def union(self, i, j):
        ri = self.find(i)
        rj = self.find(j)
        if ri == rj:
            return False
        if self.r[ri] > self.r[rj]:
            self.p[rj] = ri
        elif self.r[ri] < self.r[rj]:
            self.p[ri] = rj
        else:
            self.p[rj] = ri
            self.r[ri] += 1
        return True


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
  
        n = len(graph)
        uf = UF(n)
        
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    uf.union(i, j)
        
        group_size = Counter()
        malware_count = Counter()
        
        for i in range(n):
            group_size[uf.find(i)] += 1
        for j in initial:
            malware_count[uf.find(j)] += 1
        
        idx = None
        max_size = 0
        for k in initial:
            root_k = uf.find(k)
            if malware_count[root_k] == 1 and ( \
                group_size[root_k] > max_size or (group_size[root_k] == max_size and k < idx)):
                idx = k
                max_size = group_size[root_k]
        
        return idx if idx is not None else min(initial)